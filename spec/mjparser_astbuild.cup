

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


init with {:
	errorDetected = false;
:}



scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, CONST, CLASS;
terminal Integer NUMBER;
terminal String  BOOLCONST;
terminal String CHARCONST;
terminal LEFT_SQUARE_BRAC;
terminal RIGHT_SQUARE_BRAC;

terminal LOGICAL_OR;


terminal FOR;

terminal READ;

terminal EQUALITY;

terminal DIFFERENCE;

terminal LESS;

terminal QUOTE;


terminal LESS_OR_EQUAL;

terminal GREATER;

terminal GREATER_OR_EQUAL;

terminal DIVIDE;

terminal MOD;

terminal String IDENT;
terminal IF, ELSE;
terminal EXTENDS;
terminal ABSTRACT;
terminal CONTINUE;
terminal BREAK;
terminal LOGICAL_AND;
terminal MINUS;
terminal MULTIPLY;
terminal INCREMENT;
terminal DECREMENT;
terminal NEW;
terminal FOREACH;
terminal DOT;
terminal COLON;

terminal MULTIPLYEQUAL;
terminal DIVIDEEQUAL;
terminal MODEQUAL;

terminal PLUSEQUAL, MINUSEQUAL;
nonterminal  VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal  ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal SametypeConstantsNumber SametypeConstantsNumber;
nonterminal SametypeConstantsIdent SametypeConstantsIdent;
nonterminal SametypeConstantsBool SametypeConstantsBool;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDeclContinue ClassDeclContinue;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal  Addop Addop;
nonterminal  ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal Sametype Sametype;
nonterminal ClassDeclList ClassDeclList;
nonterminal AbstractClassDecl AbstractClassDecl;
nonterminal AbstractClassDeclList AbstractClassDeclList;

nonterminal AbstractMethodDeclList AbstractMethodDeclList;

nonterminal TypeOrVoid TypeOrVoid;
nonterminal  RelOp RelOp;
nonterminal SemiFor SemiFor;
nonterminal MulopLeft MulopLeft;
nonterminal MulopRight MulopRight;

nonterminal AddopLeft AddopLeft;
nonterminal AddopRight AddopRight;
nonterminal ClassVarDecl ClassVarDecl;

nonterminal AssignOp AssignOp;

nonterminal AbstractMethodDecl AbstractMethodDecl;

nonterminal DesignatorStatement DesignatorStatement;

nonterminal DesignatorDot DesignatorDot;

nonterminal DesignatorBrackets DesignatorBrackets;

nonterminal Mulop Mulop;

nonterminal VariableRandomDeclarations VariableRandomDeclarations ;

nonterminal AbstractInClassDeclarations AbstractInClassDeclarations;
nonterminal ForInitialization ForInitialization;
 nonterminal For For;
 nonterminal Else Else;
 nonterminal RparenIf RparenIf;
 
 nonterminal ForIteration ForIteration;
 
 
 nonterminal ForCondition ForCondition;
 
 nonterminal TypeAndIdentInMethod TypeAndIdentInMethod;
 
nonterminal AbstractClassStartDefinition AbstractClassStartDefinition;

nonterminal AbstractClassStartDefinitionExtends AbstractClassStartDefinitionExtends;

nonterminal Print Print;

nonterminal NumberConsts NumberConsts;

nonterminal Read Read;

nonterminal ForEachStart ForEachStart;
nonterminal RightAddop1 RightAddop1;
nonterminal RightMulop1 RightMulop1;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodTypeName, MethodDecl, ClassIdentNoExtend, ClassIdentExtend, Term, Factor, Expr, ForEachIdent, ForEachDesignator, ExprInNewArray, TermListExt, ExprLeft, TermRight;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type,  CondFact, CondTerm, Condition, ConditionORStart, CondFactInTerm;
/*precedence right PLUSEQUAL; */
Program ::= (Program) PROG ProgName:P1 VariableRandomDeclarations:V2  LBRACE   MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, V2, M3); RESULT.setLine(P1left); :};
			
			
			ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};
		
	VariableRandomDeclarations ::=  
								
								VariableRandomDeclarations:V1 VarDeclList:V2 {: RESULT=new VariableRandomDeclarationsDerived1(V1, V2); RESULT.setLine(V1left); :}
								|
								VariableRandomDeclarations:V1 AbstractClassDeclList:A2 {: RESULT=new VariableRandomDeclarationsDerived2(V1, A2); RESULT.setLine(V1left); :} 
								|
								VariableRandomDeclarations:V1 ClassDeclList:C2 {: RESULT=new VariableRandomDeclarationsDerived3(V1, C2); RESULT.setLine(V1left); :}
								|
								VariableRandomDeclarations:V1 ConstDeclList:C2 {: RESULT=new VariableRandomDeclarationsDerived4(V1, C2); RESULT.setLine(V1left); :} 
								| {: RESULT=new VariableRandomDeclarationsDerived5(); :}
								;



ConstDeclList ::= (ConstDeclNumber) CONST Type:constType SametypeConstantsNumber:S1 SEMI {: RESULT=new ConstDeclNumber(constType, S1); RESULT.setLine(constTypeleft); :} 
					|
					(ConstDeclString) CONST Type:constType SametypeConstantsIdent:S1 SEMI {: RESULT=new ConstDeclString(constType, S1); RESULT.setLine(constTypeleft); :}
					| 
					(ConstDeclBool) CONST Type:constType  SametypeConstantsBool:S1 SEMI {: RESULT=new ConstDeclBool(constType, S1); RESULT.setLine(constTypeleft); :}
					|
					(ConstError) CONST error SEMI {: RESULT=new ConstError(); :};


SametypeConstantsNumber ::= (SametypeConstants1) IDENT:constantIdent EQUAL NUMBER:num COMMA SametypeConstantsNumber:S1 {: RESULT=new SametypeConstants1(constantIdent, num, S1); RESULT.setLine(constantIdentleft); :}
						|
						(SametypeConstants2) IDENT:constantIdent EQUAL NUMBER:num {: RESULT=new SametypeConstants2(constantIdent, num); RESULT.setLine(constantIdentleft); :} ;
						
	

ClassDeclList ::= (ClassDeclarationWithExtended) ClassIdentExtend:C1  ClassDeclContinue:C2 {: RESULT=new ClassDeclarationWithExtended(C1, C2); RESULT.setLine(C1left); :}
			|
			(ClassDeclarationWithNoExtended) ClassIdentNoExtend:C1  ClassDeclContinue:C2 {: RESULT=new ClassDeclarationWithNoExtended(C1, C2); RESULT.setLine(C1left); :} ;

ClassIdentExtend ::= (ClassIdentExtend) CLASS IDENT:ident EXTENDS Type:t {: RESULT=new ClassIdentExtend(ident, t); RESULT.setLine(identleft); :};

ClassIdentNoExtend ::= (ClassIdentNoExtend) CLASS IDENT:ident {: RESULT=new ClassIdentNoExtend(ident); RESULT.setLine(identleft); :};


ClassDeclContinue ::= (ClassDeclContinue1Method) LBRACE ClassVarDecl:C1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new ClassDeclContinue1Method(C1, M2); RESULT.setLine(C1left); :}
						|
						(ClassDeclContinueNoMethod) LBRACE ClassVarDecl:C1 RBRACE {: RESULT=new ClassDeclContinueNoMethod(C1); RESULT.setLine(C1left); :} ;

ClassVarDecl ::= (ClassVarDecl) VarDecl:V1 {: RESULT=new ClassVarDecl(V1); RESULT.setLine(V1left); :};

						
AbstractClassDeclList ::= (AbstractClassDeclarationWithExtended)
													
				 						
			AbstractClassStartDefinitionExtends:A1   LBRACE ClassVarDecl:C2  LBRACE  AbstractInClassDeclarations:A3  RBRACE RBRACE {: RESULT=new AbstractClassDeclarationWithExtended(A1, C2, A3); RESULT.setLine(A1left); :}
			|
						(AbstractClassDeclarationNoExtended) AbstractClassStartDefinition:A1 LBRACE ClassVarDecl:C2  LBRACE  AbstractInClassDeclarations:A3  RBRACE RBRACE {: RESULT=new AbstractClassDeclarationNoExtended(A1, C2, A3); RESULT.setLine(A1left); :}
						|
					(AbstractClassDeclarationWithExtendedNoMethods) AbstractClassStartDefinitionExtends:A1  LBRACE ClassVarDecl:C2 RBRACE {: RESULT=new AbstractClassDeclarationWithExtendedNoMethods(A1, C2); RESULT.setLine(A1left); :} 
					|
					(AbstractClassDeclarationNoExtendedNoMethods) AbstractClassStartDefinition:A1 LBRACE ClassVarDecl:C2 RBRACE {: RESULT=new AbstractClassDeclarationNoExtendedNoMethods(A1, C2); RESULT.setLine(A1left); :} 
			;

AbstractClassStartDefinition ::= (AbstractClassStartDefinition) ABSTRACT CLASS IDENT:ident {: RESULT=new AbstractClassStartDefinition(ident); RESULT.setLine(identleft); :};

AbstractClassStartDefinitionExtends ::= (AbstractClassStartDefinitionExtends)  ABSTRACT CLASS IDENT:ident EXTENDS Type:t {: RESULT=new AbstractClassStartDefinitionExtends(ident, t); RESULT.setLine(identleft); :};
			AbstractInClassDeclarations ::= (AbstractClassWithAbstractMethod) AbstractInClassDeclarations:A1 AbstractMethodDecl:abstractMethod {: RESULT=new AbstractClassWithAbstractMethod(A1, abstractMethod); RESULT.setLine(A1left); :}
											|
											(AbstractClassWithRegularMethod) AbstractInClassDeclarations:A1 MethodDecl:regularMethod {: RESULT=new AbstractClassWithRegularMethod(A1, regularMethod); RESULT.setLine(A1left); :}
											| {: RESULT=new AbstractInClassDeclarationsDerived1(); :}
											;
											
VarDeclList ::= (VarDeclList1) Type:varType Sametype:sameType SEMI {: RESULT=new VarDeclList1(varType, sameType); RESULT.setLine(varTypeleft); :}
				| 
				(VarDeclErrorComma) error COMMA {: RESULT=new VarDeclErrorComma(); :}

				| 
				(VarDeclErrorSEMI) error SEMI {: RESULT=new VarDeclErrorSEMI(); :}
				;
			

Sametype ::= (Sametyperecursive) IDENT:varName COMMA Sametype:S1 {: RESULT=new Sametyperecursive(varName, S1); RESULT.setLine(varNameleft); :}
				|
				(Sametypeident) IDENT:varName {: RESULT=new Sametypeident(varName); RESULT.setLine(varNameleft); :} 
				|
				(SametypeIdentBrackets) IDENT:varName LEFT_SQUARE_BRAC RIGHT_SQUARE_BRAC {: RESULT=new SametypeIdentBrackets(varName); RESULT.setLine(varNameleft); :}
				|
				(SameTypeSquareBrackets) IDENT:varName LEFT_SQUARE_BRAC RIGHT_SQUARE_BRAC COMMA Sametype:S1 {: RESULT=new SameTypeSquareBrackets(varName, S1); RESULT.setLine(varNameleft); :}
				;
				
				
SametypeConstantsIdent ::= (SametypeConstantsIdent1) IDENT:constantIdent CHARCONST:C1 COMMA SametypeConstantsIdent:S2 {: RESULT=new SametypeConstantsIdent1(constantIdent, C1, S2); RESULT.setLine(constantIdentleft); :}
 					|
 					(SametypeConstantsIdent2) IDENT:constantIdent EQUAL CHARCONST:C1 {: RESULT=new SametypeConstantsIdent2(constantIdent, C1); RESULT.setLine(constantIdentleft); :};
 					
 SametypeConstantsBool ::= (SametypeConstantsBool1) IDENT:constantIdent EQUAL BOOLCONST:boolconst COMMA SametypeConstantsBool:S1 {: RESULT=new SametypeConstantsBool1(constantIdent, boolconst, S1); RESULT.setLine(constantIdentleft); :} 		  
							|
							(SametypeConstantsBool2)IDENT:constantIdent EQUAL BOOLCONST:boolconst {: RESULT=new SametypeConstantsBool2(constantIdent, boolconst); RESULT.setLine(constantIdentleft); :} ;
				
		
							
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDeclType) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDecl:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclType(M1, F2, V3, S4); RESULT.setLine(M1left); :}  ;
	/*
				|
				(MethodDeclVoid) MethodTypeName LPAREN FormPars RPAREN VarDecl LBRACE StatementList RBRACE ;
			*/
				
		MethodTypeName ::= (MethodTypeName) TypeOrVoid:t IDENT:methName {: RESULT=new MethodTypeName(t, methName); RESULT.setLine(tleft); :} ;
		/*
								|
							(MethodTypeNameVoid) VOID IDENT:methName 
							;
		*/
VarDecl ::= (VarDecl1) VarDecl:V1 VarDeclList:V2 {: RESULT=new VarDecl1(V1, V2); RESULT.setLine(V1left); :}   
			| {: RESULT=new VarDeclDerived1(); :}
			;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamDecl:F1 COMMA FormalParamList:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;

FormalParamDecl ::= (FormalParamDeclarations) Type:T1 IDENT:ident {: RESULT=new FormalParamDeclarations(T1, ident); RESULT.setLine(T1left); :}
					|
					(FormalParamDeclarationsArray) Type:T1 IDENT:ident LEFT_SQUARE_BRAC RIGHT_SQUARE_BRAC {: RESULT=new FormalParamDeclarationsArray(T1, ident); RESULT.setLine(T1left); :}
					|
					(ErrorParam) error {: RESULT=new ErrorParam(); :}
					;  
				
					
				
					
StatementList ::= (Statements) Statement:S1 StatementList:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}  
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		  	|
		  	(ForEachStatement) ForEachStart:F1 LPAREN ForEachIdent:F2 COLON ForEachDesignator:F3 RPAREN Statement:S4 {: RESULT=new ForEachStatement(F1, F2, F3, S4); RESULT.setLine(F1left); :} 
		  	|
		  	
		   (ForStatement) For:F1 LPAREN SEMI SEMI RPAREN Statement:S2 {: RESULT=new ForStatement(F1, S2); RESULT.setLine(F1left); :}
		   |
		   
		   (ForStatementInitializationMatched) For:F1 LPAREN ForInitialization:F2 SEMI SEMI RPAREN Statement:S3 {: RESULT=new ForStatementInitializationMatched(F1, F2, S3); RESULT.setLine(F1left); :}
		   |
		 
		   (ForStatementCondition) For:F1 LPAREN SEMI  ForCondition:F2 SEMI RPAREN Statement:S3 {: RESULT=new ForStatementCondition(F1, F2, S3); RESULT.setLine(F1left); :}
		   |
		   (ForStatementIncrement) For:F1 LPAREN SEMI SEMI ForIteration:F2 RPAREN Statement:S3 {: RESULT=new ForStatementIncrement(F1, F2, S3); RESULT.setLine(F1left); :}
		   |
		   (ForStatementInitializationAndCondition) For:F1 LPAREN ForInitialization:F2 SEMI ForCondition:F3 SEMI RPAREN Statement:S4 {: RESULT=new ForStatementInitializationAndCondition(F1, F2, F3, S4); RESULT.setLine(F1left); :}
		   |
		   (ForStatementInitializationAndIncrement) For:F1 LPAREN ForInitialization:F2 SEMI SEMI ForIteration:F3 RPAREN Statement:S4 {: RESULT=new ForStatementInitializationAndIncrement(F1, F2, F3, S4); RESULT.setLine(F1left); :}
		   |
		   (ForStatementConditionAndIncrement)  For:F1 LPAREN  SEMI ForCondition:F2 SEMI ForIteration:F3 RPAREN Statement:S4 {: RESULT=new ForStatementConditionAndIncrement(F1, F2, F3, S4); RESULT.setLine(F1left); :}
		   |
		   (ForStatementInitializationIncrementAndCondition)  For:F1 LPAREN ForInitialization:F2 SEMI ForCondition:F3 SEMI ForIteration:F4 RPAREN Statement:S5 {: RESULT=new ForStatementInitializationIncrementAndCondition(F1, F2, F3, F4, S5); RESULT.setLine(F1left); :} 
		   
		   ; 
					ForInitialization ::= (ForInit) DesignatorStatement:D1 {: RESULT=new ForInit(D1); RESULT.setLine(D1left); :} ;
					For ::= (For) FOR:f {: RESULT=new For(); :} ;
					
				ForIteration ::= (ForIteration) DesignatorStatement:D1 {: RESULT=new ForIteration(D1); RESULT.setLine(D1left); :};
				
				ForCondition ::= (ForCondition) Condition:C1 {: RESULT=new ForCondition(C1); RESULT.setLine(C1left); :};
				
				ForEachStart ::= (ForEachStart) FOREACH {: RESULT=new ForEachStart(); :};
				
				ForEachIdent ::= (ForEachIdent) IDENT:I1 {: RESULT=new ForEachIdent(I1); RESULT.setLine(I1left); :};
				
				ForEachDesignator ::= (ForEachDesignator) Designator:D1 {: RESULT=new ForEachDesignator(D1); RESULT.setLine(D1left); :};
					
Unmatched ::= (UnmatchedIf) IF LPAREN Condition:C1 RparenIf:R2 Statement:S3 {: RESULT=new UnmatchedIf(C1, R2, S3); RESULT.setLine(C1left); :}
		 	|
		 	(UnmatchedIfElse) IF LPAREN Condition:C1 RparenIf:R2 Matched:M3 Else:E4 Unmatched:U5 {: RESULT=new UnmatchedIfElse(C1, R2, M3, E4, U5); RESULT.setLine(C1left); :}
		 	;
		 RparenIf ::= (RightParentInIF) RPAREN {: RESULT=new RightParentInIF(); :};
		 Else ::= (ElseInIf) ELSE {: RESULT=new ElseInIf(); :};

Matched ::= (DesignatorStatement12345) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatement12345(D1); RESULT.setLine(D1left); :} 
		  	|
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) Print:P1 SEMI {: RESULT=new PrintStmt(P1); RESULT.setLine(P1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		  
		   |
		    
		   (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
		   
		   |
		   
		  (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
		  
		  
		  	|
		  	
		   (ReadStatement) Read:R1 LPAREN Designator:D2 RPAREN SEMI {: RESULT=new ReadStatement(R1, D2); RESULT.setLine(R1left); :}
		   |

		  
		
		   (MatchedStatementkdkdkdkd) IF LPAREN Condition:C1 RparenIf:R2 Matched:M3 Else:E4 Matched:M5 {: RESULT=new MatchedStatementkdkdkdkd(C1, R2, M3, E4, M5); RESULT.setLine(C1left); :} 
		    |
		    (StatementInBlock) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementInBlock(S1); RESULT.setLine(S1left); :} ;
		 
		
		
			Print ::= (PrintExpression) PRINT LPAREN Expr:E1 RPAREN {: RESULT=new PrintExpression(E1); RESULT.setLine(E1left); :}
					|
					(PrintExpAndNumberConst) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN {: RESULT=new PrintExpAndNumberConst(E1, N2); RESULT.setLine(E1left); :}
					;
		Read ::= (Read) READ {: RESULT=new Read(); :} ;
/*					
Expr ::= (AddExpr) Expr:te Addop Term:t
	 |
	 (TermExpr) Term:t
	 |
	 
	 (MinusTermExpr) MINUS Term:t ;
	 */
	 
	 
	Expr ::= (ExprAddopRight) ExprLeft:E1 RightAddop1:R2 Expr:E3 {: RESULT=new ExprAddopRight(E1, R2, E3); RESULT.setLine(E1left); :}
	|
	(ExprLeftInAddopRight) ExprLeft:E1 {: RESULT=new ExprLeftInAddopRight(E1); RESULT.setLine(E1left); :}
	;
	 ExprLeft ::= (AddExpr) ExprLeft:te AddopLeft:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
	 |
	 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	 |
	 
	 (MinusTermExpr) MINUS Term:t {: RESULT=new MinusTermExpr(t); RESULT.setLine(tleft); :} 
	 
	;
	 
/*
Term ::= (TermOnlyFactor) Factor:t
			| 
			(TermRepetition) Term Mulop Factor 
		
			
			;

*/
RightMulop1 ::= (RightMulop) MulopRight:M1 {: RESULT=new RightMulop(M1); RESULT.setLine(M1left); :} ;

Term ::= (TermRightRepetition) TermRight:T1 RightMulop1:R2 Term:T3 {: RESULT=new TermRightRepetition(T1, R2, T3); RESULT.setLine(T1left); :}
		|
		(TermRightRepetition1) TermRight:T1 {: RESULT=new TermRightRepetition1(T1); RESULT.setLine(T1left); :}
		;
	TermRight ::= (TermOnlyFactor) Factor:t {: RESULT=new TermOnlyFactor(t); RESULT.setLine(tleft); :}
					|
					(TermRepetition) TermRight:T1 MulopLeft:M2 Factor:F3 {: RESULT=new TermRepetition(T1, M2, F3); RESULT.setLine(T1left); :}
					;
Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		| 
		(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		|
		(BoolConstants) BOOLCONST:B1 {: RESULT=new BoolConstants(B1); RESULT.setLine(B1left); :}
		|
		(ExpressionInParanthesis) LPAREN Expr:E1 RPAREN {: RESULT=new ExpressionInParanthesis(E1); RESULT.setLine(E1left); :}
		|
		(NewTypeNoExpression) NEW Type:type {: RESULT=new NewTypeNoExpression(type); RESULT.setLine(typeleft); :}
		|
		(NewTypeExpression) NEW Type:type ExprInNewArray:E1 {: RESULT=new NewTypeExpression(type, E1); RESULT.setLine(typeleft); :}
		|
		(CharConst) CHARCONST:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
		;
		
		ExprInNewArray ::= (ExprInNewArray) LEFT_SQUARE_BRAC Expr:E1 RIGHT_SQUARE_BRAC {: RESULT=new ExprInNewArray(E1); RESULT.setLine(E1left); :} ;
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :} ;
				
Designator ::=  (Designator) IDENT:desIdent DesignatorDot:D1 {: RESULT=new Designator(desIdent, D1); RESULT.setLine(desIdentleft); :} ;
				
	
		DesignatorDot ::=(DesignatorDot1) DesignatorDot:D1 LEFT_SQUARE_BRAC Expr:e RIGHT_SQUARE_BRAC {: RESULT=new DesignatorDot1(D1, e); RESULT.setLine(D1left); :}
						|
						(DesignatorDot2) DesignatorDot:D1 DOT IDENT:ident {: RESULT=new DesignatorDot2(D1, ident); RESULT.setLine(D1left); :}
						| {: RESULT=new DesignatorDotDerived1(); :}
						;
						/*
					DesignatorBrackets ::= DesignatorBrackets LEFT_SQUARE_BRAC Expr RIGHT_SQUARE_BRAC
						|
						IDENT ;
		
						*/
/*						
Addop ::= (LeftAddop) AddopLeft
			|
			(RightAddop) AddopRight 
			;
*/											
AddopLeft ::= (Plus) PLUS {: RESULT=new Plus(); :}
			|
			(Minus) MINUS {: RESULT=new Minus(); :} ;
RightAddop1 ::= (RightAddop) AddopRight:A1 {: RESULT=new RightAddop(A1); RESULT.setLine(A1left); :};
	
AddopRight ::= (PlusEqual) PLUSEQUAL {: RESULT=new PlusEqual(); :}
				| 
				(MinusEqual) MINUSEQUAL {: RESULT=new MinusEqual(); :}
				;
		
Condition ::= (ConditionOR) ConditionORStart:C1 LOGICAL_OR Condition:C2 {: RESULT=new ConditionOR(C1, C2); RESULT.setLine(C1left); :}
			|
			(ConditionWithoutOR) CondTerm:C1 {: RESULT=new ConditionWithoutOR(C1); RESULT.setLine(C1left); :} ;
			
ConditionORStart ::= (CondORStart)  CondTerm:C1 {: RESULT=new CondORStart(C1); RESULT.setLine(C1left); :};

CondTerm ::= (CondTermAnd) CondFactInTerm:C1 LOGICAL_AND CondTerm:ct {: RESULT=new CondTermAnd(C1, ct); RESULT.setLine(C1left); :}
			|
			(CondTermFact) CondFact:cnd {: RESULT=new CondTermFact(cnd); RESULT.setLine(cndleft); :} ;
			
CondFactInTerm ::= (CondFactInTerm)CondFact:C1 {: RESULT=new CondFactInTerm(C1); RESULT.setLine(C1left); :};
CondFact ::= (CondFactRelop) CondFact:cndFct RelOp:R1 Expr:expr {: RESULT=new CondFactRelop(cndFct, R1, expr); RESULT.setLine(cndFctleft); :}
			|
			(CondFactNoRelop) Expr:E1 {: RESULT=new CondFactNoRelop(E1); RESULT.setLine(E1left); :} ;
			
RelOp ::= (Equality) EQUALITY {: RESULT=new Equality(); :} 
			|
		(Difference) DIFFERENCE {: RESULT=new Difference(); :} 
		|
		(Less) LESS {: RESULT=new Less(); :} 
			|
		(Less_or_equal) LESS_OR_EQUAL {: RESULT=new Less_or_equal(); :} 
		|
		(Greater) GREATER {: RESULT=new Greater(); :} 
		|
		(Greater_or_equal) GREATER_OR_EQUAL {: RESULT=new Greater_or_equal(); :} ;
			
	
	DesignatorStatement ::=(DesignatorIncrement) Designator:des INCREMENT {: RESULT=new DesignatorIncrement(des); RESULT.setLine(desleft); :}
							|
							(DesignatorDecrement)Designator:des DECREMENT {: RESULT=new DesignatorDecrement(des); RESULT.setLine(desleft); :}
							|
							(DesignatorAssignOp) Designator:des AssignOp:A1 Expr:E2 {: RESULT=new DesignatorAssignOp(des, A1, E2); RESULT.setLine(desleft); :} 
							|
							(DesignatorActualPars) Designator:des LPAREN ActualPars:A1 RPAREN {: RESULT=new DesignatorActualPars(des, A1); RESULT.setLine(desleft); :}
							
							;
							
							
		AssignOp ::= (Equal) EQUAL {: RESULT=new Equal(); :}
						|
						(RightAssignigWithAdding) AddopRight:A1 {: RESULT=new RightAssignigWithAdding(A1); RESULT.setLine(A1left); :}
						|
						(RightAssignigWithMul) MulopRight:M1 {: RESULT=new RightAssignigWithMul(M1); RESULT.setLine(M1left); :}
						 ;
	/*
	Mulop ::= (LeftMulop) MulopLeft
				|
				(RightMulop) MulopRight
				
				;
				*/
		MulopRight ::= (EqualMultiply) MULTIPLYEQUAL {: RESULT=new EqualMultiply(); :}
						|
						(EqualDivide) DIVIDEEQUAL {: RESULT=new EqualDivide(); :}
						|
						(EqualMod) MODEQUAL {: RESULT=new EqualMod(); :}
						;
	MulopLeft ::= (Multiply) MULTIPLY {: RESULT=new Multiply(); :}
		|
		(Divide) DIVIDE {: RESULT=new Divide(); :} 
		|
		(Mod) MOD {: RESULT=new Mod(); :} ;
AbstractMethodDeclList ::= AbstractMethodDeclList:A1 AbstractMethodDecl:A2 {: RESULT=new AbstractMethodDeclListDerived1(A1, A2); RESULT.setLine(A1left); :}
						| {: RESULT=new AbstractMethodDeclListDerived2(); :}
						;
												
AbstractMethodDecl ::= (AbstractMethodDeclarationType) ABSTRACT TypeAndIdentInMethod:T1 LPAREN FormPars:F2 RPAREN SEMI {: RESULT=new AbstractMethodDeclarationType(T1, F2); RESULT.setLine(T1left); :} 
					
					;
				
	TypeAndIdentInMethod ::= (TypeAndIdentInMethod)  TypeOrVoid:tov IDENT:methName {: RESULT=new TypeAndIdentInMethod(tov, methName); RESULT.setLine(tovleft); :} ;
	
	TypeOrVoid ::=(TypeVoid) Type : t {: RESULT=new TypeVoid(t); RESULT.setLine(tleft); :} 
				|
				(VoidType) VOID {: RESULT=new VoidType(); :} ;
	/*	
								|
								 (AbstractMethodVoid) ABSTRACT VOID IDENT:ident ;
								 */