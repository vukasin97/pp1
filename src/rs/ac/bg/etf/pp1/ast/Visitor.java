// generated with ast extension for cup
// version 0.8
// 18/7/2020 23:12:43


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(RightAddop1 RightAddop1);
    public void visit(FormPars FormPars);
    public void visit(Factor Factor);
    public void visit(Statement Statement);
    public void visit(MethodDecl MethodDecl);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(AddopLeft AddopLeft);
    public void visit(AddopRight AddopRight);
    public void visit(AbstractInClassDeclarations AbstractInClassDeclarations);
    public void visit(Print Print);
    public void visit(AbstractMethodDecl AbstractMethodDecl);
    public void visit(MulopRight MulopRight);
    public void visit(FormalParamList FormalParamList);
    public void visit(ConditionORStart ConditionORStart);
    public void visit(Else Else);
    public void visit(MulopLeft MulopLeft);
    public void visit(Expr Expr);
    public void visit(AbstractClassDecl AbstractClassDecl);
    public void visit(VarDecl VarDecl);
    public void visit(SemiFor SemiFor);
    public void visit(Unmatched Unmatched);
    public void visit(ExprLeft ExprLeft);
    public void visit(AbstractMethodDeclList AbstractMethodDeclList);
    public void visit(RelOp RelOp);
    public void visit(TypeOrVoid TypeOrVoid);
    public void visit(VariableRandomDeclarations VariableRandomDeclarations);
    public void visit(ActualParamList ActualParamList);
    public void visit(Condition Condition);
    public void visit(Mulop Mulop);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(SametypeConstantsBool SametypeConstantsBool);
    public void visit(NumberConsts NumberConsts);
    public void visit(Addop Addop);
    public void visit(StatementList StatementList);
    public void visit(ConstDecl ConstDecl);
    public void visit(DesignatorBrackets DesignatorBrackets);
    public void visit(RparenIf RparenIf);
    public void visit(SametypeConstantsNumber SametypeConstantsNumber);
    public void visit(ClassDeclList ClassDeclList);
    public void visit(CondTerm CondTerm);
    public void visit(FormalParamDecl FormalParamDecl);
    public void visit(ActualPars ActualPars);
    public void visit(TermRight TermRight);
    public void visit(ClassDecl ClassDecl);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(ForInitialization ForInitialization);
    public void visit(AssignOp AssignOp);
    public void visit(TermListExt TermListExt);
    public void visit(AbstractClassDeclList AbstractClassDeclList);
    public void visit(DesignatorDot DesignatorDot);
    public void visit(RightMulop1 RightMulop1);
    public void visit(Matched Matched);
    public void visit(VarDeclList VarDeclList);
    public void visit(CondFact CondFact);
    public void visit(ClassDeclContinue ClassDeclContinue);
    public void visit(SametypeConstantsIdent SametypeConstantsIdent);
    public void visit(Term Term);
    public void visit(Sametype Sametype);
    public void visit(VoidType VoidType);
    public void visit(TypeVoid TypeVoid);
    public void visit(TypeAndIdentInMethod TypeAndIdentInMethod);
    public void visit(AbstractMethodDeclarationType AbstractMethodDeclarationType);
    public void visit(AbstractMethodDeclListDerived2 AbstractMethodDeclListDerived2);
    public void visit(AbstractMethodDeclListDerived1 AbstractMethodDeclListDerived1);
    public void visit(Mod Mod);
    public void visit(Divide Divide);
    public void visit(Multiply Multiply);
    public void visit(EqualMod EqualMod);
    public void visit(EqualDivide EqualDivide);
    public void visit(EqualMultiply EqualMultiply);
    public void visit(RightAssignigWithMul RightAssignigWithMul);
    public void visit(RightAssignigWithAdding RightAssignigWithAdding);
    public void visit(Equal Equal);
    public void visit(DesignatorActualPars DesignatorActualPars);
    public void visit(DesignatorAssignOp DesignatorAssignOp);
    public void visit(DesignatorDecrement DesignatorDecrement);
    public void visit(DesignatorIncrement DesignatorIncrement);
    public void visit(Greater_or_equal Greater_or_equal);
    public void visit(Greater Greater);
    public void visit(Less_or_equal Less_or_equal);
    public void visit(Less Less);
    public void visit(Difference Difference);
    public void visit(Equality Equality);
    public void visit(CondFactNoRelop CondFactNoRelop);
    public void visit(CondFactRelop CondFactRelop);
    public void visit(CondFactInTerm CondFactInTerm);
    public void visit(CondTermFact CondTermFact);
    public void visit(CondTermAnd CondTermAnd);
    public void visit(CondORStart CondORStart);
    public void visit(ConditionWithoutOR ConditionWithoutOR);
    public void visit(ConditionOR ConditionOR);
    public void visit(MinusEqual MinusEqual);
    public void visit(PlusEqual PlusEqual);
    public void visit(RightAddop RightAddop);
    public void visit(Minus Minus);
    public void visit(Plus Plus);
    public void visit(DesignatorDotDerived1 DesignatorDotDerived1);
    public void visit(DesignatorDot2 DesignatorDot2);
    public void visit(DesignatorDot1 DesignatorDot1);
    public void visit(Designator Designator);
    public void visit(ActualParam ActualParam);
    public void visit(ActualParams ActualParams);
    public void visit(NoActuals NoActuals);
    public void visit(Actuals Actuals);
    public void visit(ExprInNewArray ExprInNewArray);
    public void visit(CharConst CharConst);
    public void visit(NewTypeExpression NewTypeExpression);
    public void visit(NewTypeNoExpression NewTypeNoExpression);
    public void visit(ExpressionInParanthesis ExpressionInParanthesis);
    public void visit(BoolConstants BoolConstants);
    public void visit(FuncCall FuncCall);
    public void visit(Var Var);
    public void visit(Const Const);
    public void visit(TermRepetition TermRepetition);
    public void visit(TermOnlyFactor TermOnlyFactor);
    public void visit(TermRightRepetition1 TermRightRepetition1);
    public void visit(TermRightRepetition TermRightRepetition);
    public void visit(RightMulop RightMulop);
    public void visit(MinusTermExpr MinusTermExpr);
    public void visit(TermExpr TermExpr);
    public void visit(AddExpr AddExpr);
    public void visit(ExprLeftInAddopRight ExprLeftInAddopRight);
    public void visit(ExprAddopRight ExprAddopRight);
    public void visit(Read Read);
    public void visit(PrintExpAndNumberConst PrintExpAndNumberConst);
    public void visit(PrintExpression PrintExpression);
    public void visit(StatementInBlock StatementInBlock);
    public void visit(MatchedStatementkdkdkdkd MatchedStatementkdkdkdkd);
    public void visit(ReadStatement ReadStatement);
    public void visit(BreakStatement BreakStatement);
    public void visit(ContinueStatement ContinueStatement);
    public void visit(ReturnNoExpr ReturnNoExpr);
    public void visit(ReturnExpr ReturnExpr);
    public void visit(PrintStmt PrintStmt);
    public void visit(ErrorStmt ErrorStmt);
    public void visit(DesignatorStatement12345 DesignatorStatement12345);
    public void visit(ElseInIf ElseInIf);
    public void visit(RightParentInIF RightParentInIF);
    public void visit(UnmatchedIfElse UnmatchedIfElse);
    public void visit(UnmatchedIf UnmatchedIf);
    public void visit(ForEachDesignator ForEachDesignator);
    public void visit(ForEachIdent ForEachIdent);
    public void visit(ForEachStart ForEachStart);
    public void visit(ForCondition ForCondition);
    public void visit(ForIteration ForIteration);
    public void visit(For For);
    public void visit(ForInit ForInit);
    public void visit(ForStatementInitializationIncrementAndCondition ForStatementInitializationIncrementAndCondition);
    public void visit(ForStatementConditionAndIncrement ForStatementConditionAndIncrement);
    public void visit(ForStatementInitializationAndIncrement ForStatementInitializationAndIncrement);
    public void visit(ForStatementInitializationAndCondition ForStatementInitializationAndCondition);
    public void visit(ForStatementIncrement ForStatementIncrement);
    public void visit(ForStatementCondition ForStatementCondition);
    public void visit(ForStatementInitializationMatched ForStatementInitializationMatched);
    public void visit(ForStatement ForStatement);
    public void visit(ForEachStatement ForEachStatement);
    public void visit(UnmatchedStmt UnmatchedStmt);
    public void visit(MatchedStmt MatchedStmt);
    public void visit(NoStmt NoStmt);
    public void visit(Statements Statements);
    public void visit(ErrorParam ErrorParam);
    public void visit(FormalParamDeclarationsArray FormalParamDeclarationsArray);
    public void visit(FormalParamDeclarations FormalParamDeclarations);
    public void visit(SingleFormalParamDecl SingleFormalParamDecl);
    public void visit(FormalParamDecls FormalParamDecls);
    public void visit(NoFormParam NoFormParam);
    public void visit(FormParams FormParams);
    public void visit(VarDeclDerived1 VarDeclDerived1);
    public void visit(VarDecl1 VarDecl1);
    public void visit(MethodTypeName MethodTypeName);
    public void visit(MethodDeclType MethodDeclType);
    public void visit(NoMethodDecl NoMethodDecl);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(Type Type);
    public void visit(SametypeConstantsBool2 SametypeConstantsBool2);
    public void visit(SametypeConstantsBool1 SametypeConstantsBool1);
    public void visit(SametypeConstantsIdent2 SametypeConstantsIdent2);
    public void visit(SametypeConstantsIdent1 SametypeConstantsIdent1);
    public void visit(SameTypeSquareBrackets SameTypeSquareBrackets);
    public void visit(SametypeIdentBrackets SametypeIdentBrackets);
    public void visit(Sametypeident Sametypeident);
    public void visit(Sametyperecursive Sametyperecursive);
    public void visit(VarDeclErrorSEMI VarDeclErrorSEMI);
    public void visit(VarDeclErrorComma VarDeclErrorComma);
    public void visit(VarDeclList1 VarDeclList1);
    public void visit(AbstractInClassDeclarationsDerived1 AbstractInClassDeclarationsDerived1);
    public void visit(AbstractClassWithRegularMethod AbstractClassWithRegularMethod);
    public void visit(AbstractClassWithAbstractMethod AbstractClassWithAbstractMethod);
    public void visit(AbstractClassStartDefinitionExtends AbstractClassStartDefinitionExtends);
    public void visit(AbstractClassStartDefinition AbstractClassStartDefinition);
    public void visit(AbstractClassDeclarationNoExtendedNoMethods AbstractClassDeclarationNoExtendedNoMethods);
    public void visit(AbstractClassDeclarationWithExtendedNoMethods AbstractClassDeclarationWithExtendedNoMethods);
    public void visit(AbstractClassDeclarationNoExtended AbstractClassDeclarationNoExtended);
    public void visit(AbstractClassDeclarationWithExtended AbstractClassDeclarationWithExtended);
    public void visit(ClassVarDecl ClassVarDecl);
    public void visit(ClassDeclContinueNoMethod ClassDeclContinueNoMethod);
    public void visit(ClassDeclContinue1Method ClassDeclContinue1Method);
    public void visit(ClassIdentNoExtend ClassIdentNoExtend);
    public void visit(ClassIdentExtend ClassIdentExtend);
    public void visit(ClassDeclarationWithNoExtended ClassDeclarationWithNoExtended);
    public void visit(ClassDeclarationWithExtended ClassDeclarationWithExtended);
    public void visit(SametypeConstants2 SametypeConstants2);
    public void visit(SametypeConstants1 SametypeConstants1);
    public void visit(ConstError ConstError);
    public void visit(ConstDeclBool ConstDeclBool);
    public void visit(ConstDeclString ConstDeclString);
    public void visit(ConstDeclNumber ConstDeclNumber);
    public void visit(VariableRandomDeclarationsDerived5 VariableRandomDeclarationsDerived5);
    public void visit(VariableRandomDeclarationsDerived4 VariableRandomDeclarationsDerived4);
    public void visit(VariableRandomDeclarationsDerived3 VariableRandomDeclarationsDerived3);
    public void visit(VariableRandomDeclarationsDerived2 VariableRandomDeclarationsDerived2);
    public void visit(VariableRandomDeclarationsDerived1 VariableRandomDeclarationsDerived1);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}
